#!/bin/bash

# week10-check-4

# Author:  Murray Saul
# Date:    February 17, 2021
# Modified By: Jason Carman
# Modified: January 3, 2023
#
# Purpose: Verify that user created a shell script "for-1.bash" and "for-2.bash"
#          exists in their home directory and have execute permissions
#
#          This script also checks to if student's scripts' output match the
#          required output as per tutorial instructions
#          

# Function to indicate OK (in green) if check is true; otherwise, indicate
# WARNING (in red) if check is false and end with false exit status

function check(){

  if eval $1
  then
     echo -e "\e[0;32mOK\e[m"
  else
     echo -e "\e[0;31mWARNING\e[m"
     echo 
     printf "$2" 
     echo
     exit 1
  fi

} # end of check() function

# Set shell shell history
HISTFILE=~/.bash_history
set -o history

clear  # Clear the screen

# Make certain user is in the home directory

# if [ $PWD != $HOME ]
#  then
#   echo -e "\033[1mERROR:\033[0m"
#   echo
#   echo "You are NOT located in your HOME directory."
#   echo -e "(i.e. \033[1m$HOME\033[0m )"
#   echo
#   echo -en "Issue the \033[1mcd\033[0m command (without arguments)"
#   echo -e "and confirm that you are"
#   echo -e "currently located in your home directory with the \033[1mpwd\033[0m command,"
#   echo "and re-run this checking script."
#   echo
#   echo
# 
#   exit 1
# fi

# Start checking of week10 tutorial
echo -e "\033[1mCHECKING YOUR WORK:\033[0m"
echo

# Check "if-1.bash" shell script was created in home directory
echo -n "Checking \"if-1.bash\" shell script file has been created in your home directory: "
check "test -f $HOME/if-1.bash" "The file pathname \"$HOME/if-1.bash\" does NOT exist. Check if you mispelled file name, or used uppercase letters by mistake. Rename the shell script file to \"if-1.bash\" in your home directory and re-run this checking script\n"

# Check "if-1.bash" shell script (in your home directory) has execute permissions
echo -n "Checking \"if-1.bash\" shell script file has execute permissions: "
check "test -x $HOME/if-1.bash" "The shell script pathname \"$HOME/if-1.bash\" does NOT have execute permissions. Add execute permissions for the owner (user) of the \"if-1.bash\" shell script file in your home directory and re-run this checking script\n"


# Create the temporary BENCHMARK output file of if-1.bash for comparison purposes
# Notice that the "Here Document" is used to create this file with redirection 

cat > /tmp/compare.$$ <<+
num1 is less than num2
+

# Run student's shell script and store stdout to a temp file

$HOME/if-1.bash > /tmp/student.$$

# Check student's "if-1.bash" shell script has CORRECT output
# Notice that "diff" command is used to compare your shell script's output
# with CORRECT required output (i.e. comparison file)
# Notice command's output and error thrown out to "/dev/null" since
# we are only interested in TRUE or FALSE.

echo -n "Checking your \"if-1.bash\" shell script file produces CORRECT required output: "
check "diff /tmp/student.$$ /tmp/compare.$$ > /dev/null 2> /dev/null" "The OUTPUT when running your Bash shell script does NOT match\nthe required specifications provided from your tutorial instructions.\n\n\e[3;4;33mYOUR SHELL SCRIPT OUTPUT (including empty lines)\e[0m\n$(cat /tmp/student.$$)\n\n\e[3;4;33mCORRECT SHELL SCRIPT OUTPUT (including empty lines)\e[0m\n$(cat /tmp/compare.$$)\n\nCAREFULLY look for differences, then make corrections to your Bash shell script\nto match CORRECT OUTPUT, save editing changes, run your script to confirm,\nand then re-run this checking script.\n\nGET USED TO THIS, SINCE THIS IS WHAT YOUR ASSIGNMENT 3\nPROGRAM WILL DO TO CHECK FOR CORRECT OUTPUT!\n\n"

# Check "for-1.bash" shell script was created in home directory
echo -n "Checking \"for-1.bash\" shell script file has been created in your home directory: "
check "test -f $HOME/for-1.bash" "The file pathname \"$HOME/for-1.bash\" does NOT exist. Check if you mispelled file name, or used uppercase letters by mistake. Rename the shell script file to \"for-1.bash\" in your home directory and re-run this checking script\n"

# Check "for-1.bash" shell script (in your home directory) has execute permissions
echo -n "Checking \"for-1.bash\" shell script file has execute permissions: "
check "test -x $HOME/for-1.bash" "The shell script pathname \"$HOME/for-1.bash\" does NOT have execute permissions. Add execute permissions for the owner (user) of the \"for-1.bash\" shell script file in your home directory and re-run this checking script\n"

# Check "for-1.bash" shell script contains "she-bang" line at TOP of file
# Notice that an extended regular expression is used to permit one or more spaces
# betweeh #! and file pathname to the bash shell

# echo -n "Checking \"for-1.bash\" shell script file contains \"she-bang\" line on first line: "
# check "head -1 $HOME/for-1.bash | egrep -sq \"^\#![ ]{1,}/bin/bash\"" "Your shell script \"$HOME/for-1.bash\" does NOT contain the she-bang line    #!/bin/bash\nstarting at the BEGINNING of the TOP line (i.e. line #1). Edit your Bash shell script to make corrections and re-run this checking script.\n"

# Create the temporary BENCHMARK output file of for-1.bash for comparison purposes
# Notice that the "Here Document" is used to create this file with redirection 

cat > /tmp/compare.$$ <<+

5
4
3
2
1
blast-off!

+

# Run student's shell script and store stdout to a temp file

$HOME/for-1.bash > /tmp/student.$$

# Check student's "for-1.bash" shell script has CORRECT output
# Notice that "diff" command is used to compare your shell script's output
# with CORRECT required output (i.e. comparison file)
# Notice command's output and error thrown out to "/dev/null" since
# we are only interested in TRUE or FALSE.

echo -n "Checking your \"for-1.bash\" shell script file produces CORRECT required output: "
check "diff /tmp/student.$$ /tmp/compare.$$ > /dev/null 2> /dev/null" "The OUTPUT when running your Bash shell script does NOT match\nthe required specifications provided from your tutorial instructions.\n\n\e[3;4;33mYOUR SHELL SCRIPT OUTPUT (including empty lines)\e[0m\n$(cat /tmp/student.$$)\n\n\e[3;4;33mCORRECT SHELL SCRIPT OUTPUT (including empty lines)\e[0m\n$(cat /tmp/compare.$$)\n\nCAREFULLY look for differences, then make corrections to your Bash shell script\nto match CORRECT OUTPUT, save editing changes, run your script to confirm,\nand then re-run this checking script.\n\nGET USED TO THIS, SINCE THIS IS WHAT YOUR ASSIGNMENT 3\nPROGRAM WILL DO TO CHECK FOR CORRECT OUTPUT!\n\n"

# Check "for-2.bash" shell script was created in home directory
echo -n "Checking \"for-2.bash\" shell script file has been created in your home directory: "
check "test -f $HOME/for-1.bash" "The file pathname \"$HOME/for-2.bash\" does NOT exist. Check if you mispelled file name, or used uppercase letters by mistake. Rename the shell script file to \"for-2.bash\" in your home directory and re-run this checking script\n"

# Check "for-2.bash" shell script (in your home directory) has execute permissions
echo -n "Checking \"for-2.bash\" shell script file has execute permissions: "
check "test -x $HOME/for-2.bash" "The shell script pathname \"$HOME/for-2.bash\" does NOT have execute permissions. Add execute permissions for the owner (user) of the \"for-2.bash\" shell script file in your home directory and re-run this checking script\n"

# Check "for-2.bash" shell script contains "she-bang" line at TOP of file
# Notice that an extended regular expression is used to permit one or more spaces
# betweeh #! and file pathname to the bash shell

# echo -n "Checking \"for-2.bash\" shell script file contains \"she-bang\" line on first line: "
# check "head -1 $HOME/for-2.bash | egrep -sq \"^\#![ ]{1,}/bin/bash\"" "Your shell script \"$HOME/for-2.bash\" does NOT contain the she-bang line    #!/bin/bash\nstarting at the BEGINNING of the TOP line (i.e. line #1). Edit your Bash shell script to make corrections and re-run this checking script.\n"

# Create the temporary BENCHMARK output file of for-2.bash for comparison purposes
# Notice that the "Here Document" is used to create this file with redirection 

cat > /tmp/compare.$$ <<+

3
2
1
blast-off!

+

# Run student's shell script and store stdout to a temp file

$HOME/for-2.bash 3 2 1 > /tmp/student.$$

# Check student's "for-2.bash" shell script has CORRECT output
# Notice that "diff" command is used to compare your shell script's output
# with CORRECT required output (i.e. comparison file)
# Notice command's output and error thrown out to "/dev/null" since
# we are only interested in TRUE or FALSE.

echo -n "Checking your \"for-2.bash\" shell script file produces CORRECT required output: "
check "diff /tmp/student.$$ /tmp/compare.$$ > /dev/null 2> /dev/null" "The OUTPUT when running your Bash shell script does NOT match\nthe required specifications provided from your tutorial instructions.\n\n\e[3;4;33mYOUR SHELL SCRIPT OUTPUT (including empty lines)\e[0m\n$(cat /tmp/student.$$)\n\n\e[3;4;33mCORRECT SHELL SCRIPT OUTPUT (including empty lines)\e[0m\n$(cat /tmp/compare.$$)\n\nCAREFULLY look for differences, then make corrections to your Bash shell script\nto match CORRECT OUTPUT, save editing changes, run your script to confirm,\nand then re-run this checking script.\n\nGET USED TO THIS, SINCE THIS IS WHAT YOUR ASSIGNMENT 3\nPROGRAM WILL DO TO CHECK FOR CORRECT OUTPUT!\n\n"

rm /tmp/student.$$ 2> /dev/null

. /home/osl640/duedates.txt

weekDueDate=$t10

/home/jason.carman/.hidden/transmogrify $USER 10 4 $(date +%s)

if [ $(date +%s) -le $weekDueDate ]
then
   label=""
else
   label="LATE "
fi


echo "${label}Week10-check-4 Check Completed for: $USER" | mail -s "${label}Week10-check-4 Successfully Completed" $USER@myseneca.ca  2> /dev/null
echo "${label}Week10-check-4 Completed for: $USER" | mail -s "${label}Week10-check-4 Successfully Completed" $USER@senecapolytechnic.ca  2> /dev/null


if [ $(date +%s) -le $weekDueDate ]
then
   echo
   echo "Congratulations!"
   echo
   echo  "You have passed the week10-check-4 script"
   echo  "This means that you correctly created and"
   echo  "ran most of your Bash shell scripts correctly.       :)"
   echo
   echo  "An email has been sent to your Seneca Polytechnic email account"
   echo  "for confirmation, keep this email for proof until the end of"
   echo  "this semester."
   echo
   echo  "You can proceed with this tutorial."
   echo
else
   echo
   echo  "You have passed the week10-check-4 script"
   echo  "This means that you correctly created and"
   echo  "ran most of your Bash shell scripts correctly.       :)"
   echo
   echo  "UNFORTUNATELY, THE DUE DATE FOR THIS TUTORIAL HAS PASSED"
   echo  "SO YOU CANNOT RECEIVE MARKS FOR THIS TUTORIAL"
   echo
   echo  "An email of your LATE submission has been sent to your"
   echo  "Seneca Polytechnic email account"
   echo
   echo  "You can proceed with this tutorial."
   echo
fi
